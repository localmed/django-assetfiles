import os, pipes
from subprocess import Popen, PIPE

from django.conf import settings
from django.contrib.staticfiles.finders import find

from assetfiles.filters.base import BaseFilter
import assetfiles.settings

class SassFilter(BaseFilter):
    input_exts = ('sass', 'scss')
    output_ext = 'css'
    sass_functions = os.path.abspath(
        os.path.join(os.path.dirname(__file__), '../scripts/sass_functions.rb'))

    def filter(self, input):
        env = dict(os.environ)
        env.update({
            'DJANGO_STATIC_URL': settings.STATIC_URL,
        })

        command = 'sass {0} {1} {2}'.format(
            '--require {0}'.format(pipes.quote(self.sass_functions)),
            ' '.join(['--load-path {0}'.format(pipes.quote(path)) for path in sass_load_paths]),
            pipes.quote(input),
        )

        process = Popen(command, shell=True, stdout=PIPE, stderr=PIPE, env=env)
        result = process.communicate()
        if process.returncode:
            raise SassError(result[1])
        else:
            return result[0]

    def skip_output_path(self, output_path):
        """
        Skips files prefixed with a '_'. These are Sass dependencies.
        """
        _, file_name = os.path.split(output_path)
        return file_name.startswith('_')

def get_static_sass_dirs(dirs=None):
    """
    Returns the directories with Sass files within the static directories.
    """
    if not dirs: dirs = assetfiles.settings.SASS_DIRS

    load_paths = []
    for dir in dirs:
        load_paths += find(dir, all=True) or []
    return load_paths

"""
These directories will be added to the Sass load path.
By default, these are 'css' directories within the static directories.
"""
sass_load_paths = get_static_sass_dirs()

class SassError(Exception):
    """
    SassError parses syntax errors generated by Sass and formats them
    for Django.
    """
    def __init__(self, stacktrace):
        self.stacktrace = stacktrace.split('\n')
        self.message    = self._message()

    def __str__(self):
        return repr(self.message)

    def _message(self):
        trace = [line.strip() for line in self.stacktrace]
        return ' '.join(trace[:2])
